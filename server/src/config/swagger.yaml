openapi: 3.0.0
info:
  title: Netlink Pagination Test API
  version: "1.0.0"
  description: API documentation for the Netlink Pagination Test Backend
servers:
  - url: http://localhost:3000
    description: Development server

paths:
  /api/products:
    get:
      summary: Retrieve a list of products
      description: Retrieve all products.
      responses:
        '200':
          description: A list of products.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
    post:
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '201':
          description: Product created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  /api/products/{id}:
    get:
      summary: Retrieve a single product
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the product.
      responses:
        '200':
          description: A single product.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found.
    put:
      summary: Update a product
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the product to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '200':
          description: Product updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      summary: Delete a product
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the product to delete.
      responses:
        '200':
          description: Product deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/users:
    get:
      summary: Retrieve a list of users
      description: Retrieve users with optional cursor-based pagination.
      parameters:
        - in: query
          name: cursor
          schema:
            type: integer
          description: The last user_id from the previous page.
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  nextCursor:
                    type: integer
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/users/{id}:
    get:
      summary: Retrieve a single user
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the user.
      responses:
        '200':
          description: A single user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.
    put:
      summary: Update a user
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete a user
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to delete.
      responses:
        '200':
          description: User deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/orders:
    get:
      summary: Retrieve a list of orders
      description: Retrieve orders with optional user filtering and cursor-based pagination.
      parameters:
        - in: query
          name: userId
          schema:
            type: integer
          description: The ID of the user whose orders are being fetched.
        - in: query
          name: cursor
          schema:
            type: integer
          description: The last order_id from the previous page.
      responses:
        '200':
          description: A list of orders.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  nextCursor:
                    type: integer
    post:
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
      responses:
        '201':
          description: Order created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
  /api/orders/{id}:
    get:
      summary: Retrieve a single order
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the order.
      responses:
        '200':
          description: A single order.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found.
    put:
      summary: Update an order
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the order to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
      responses:
        '200':
          description: Order updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
    delete:
      summary: Delete an order
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the order to delete.
      responses:
        '200':
          description: Order deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

components:
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: integer
        name:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time
    UserInput:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
      required:
        - name
        - email
    Product:
      type: object
      properties:
        product_id:
          type: integer
        product_name:
          type: string
        price:
          type: number
          format: float
        stock:
          type: integer
        created_at:
          type: string
          format: date-time
    ProductInput:
      type: object
      properties:
        product_name:
          type: string
        price:
          type: number
          format: float
        stock:
          type: integer
      required:
        - product_name
        - price
    Order:
      type: object
      properties:
        order_id:
          type: integer
        user_id:
          type: integer
        order_date:
          type: string
          format: date-time
        total_amount:
          type: number
          format: float
        orderProducts:
          type: array
          items:
            $ref: '#/components/schemas/OrderProduct'
    OrderInput:
      type: object
      properties:
        user_id:
          type: integer
        total_amount:
          type: number
          format: float
        orderProducts:
          type: array
          items:
            $ref: '#/components/schemas/OrderProductInput'
      required:
        - user_id
        - orderProducts
    OrderProduct:
      type: object
      properties:
        order_product_id:
          type: integer
        product_id:
          type: integer
        quantity:
          type: integer
        price:
          type: number
          format: float
    OrderProductInput:
      type: object
      properties:
        product_id:
          type: integer
        quantity:
          type: integer
        price:
          type: number
          format: float
      required:
        - product_id
        - price
